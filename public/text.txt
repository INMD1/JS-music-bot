        const input = interaction.options.getString('text');
        const serverQueue = queue.get(interaction.member.guild.id)
        const voiceChannel = interaction.member.voice.channel;
        const VideoPlayer = async (guild, song) => {
            const songQueue = queue.get(guild.id);
            if (song === undefined) {
                return queue.delete(guild.id);
            } else {
                const stream = ytdl(song.url, {
                    filter: "audioonly"
                });
                const resource = createAudioResource(stream);

                songQueue.audioPlayer.play(resource);
                songQueue.connection.subscribe(songQueue.audioPlayer);

                songQueue.audioPlayer.on("error", async error => {
                    console.log(error);
                    await songQueue.text_channel.send("Something went wrong. Please try again.");
                })

                console.log(songQueue.looped);
                if (songQueue.looped) {
                    songQueue.audioPlayer.on(AudioPlayerStatus.Idle, () => {
                        VideoPlayer(guild, songQueue.songs[0]);
                    })
                } else {
                    songQueue.audioPlayer.on(AudioPlayerStatus.Idle, () => {
                        songQueue.songs.shift();
                        VideoPlayer(guild, songQueue.songs[0]);
                    })
                }

                await interaction.reply(`ðŸŽµ Now playing **${song.title}** ðŸŽµ`);
            }
        }

        let song = {};

        if (serverQueue) {
            if (serverQueue.voice_channel.id !== voiceChannel.id) return interaction.reply("You need to be in the same voice channel as the bot to execute this command!");
        }

        if (ytdl.validateURL(input)) {
            const songInfo = await ytdl.getInfo(input)
            song = {
                title: songInfo.videoDetails.title,
                url: songInfo.videoDetails.video_url
            };
        } else {
            // If the argument given is not a valid youtube link
            const videoFinder = async (query) => {
                const videoResult = await yts(query);
                return (videoResult.videos.length > 1) ? videoResult.videos[0] : null;
            }

            var video;

            if (spdl.validateURL(input)) {
                const info = await spdl.getInfo(message.content.split(" ")[1]);
                video = await videoFinder(`${info.title} - ${info.artist}`);
            } else video = await videoFinder(args.join(" ").replace(`${prefix}play`, ""))

            if (video) {
                const songInfo = await ytdl.getInfo(video.url);
                song = {
                    title: songInfo.videoDetails.title,
                    url: songInfo.videoDetails.video_url,
                    duration: songInfo.videoDetails.lengthSeconds,
                    views: songInfo.videoDetails.viewCount,
                    likes: songInfo.videoDetails.likes,
                    dislikes: songInfo.videoDetails.dislikes
                };
            } else return interaction.reply("There was an error finding the video. Please try again.");
        }

        if (!serverQueue) {
            const queueConstructor = {
                voice_channel: voiceChannel,
                text_channel: interaction.member.channel,
                connection: null,
                songs: [],
                audioPlayer: createAudioPlayer(),
                paused: false,
                looped: false
            }

            queue.set(interaction.member.guild.id, queueConstructor);
            queueConstructor.songs.push(song)

            try {
                const connection = joinVoiceChannel({
                    channelId: voiceChannel.id,
                    guildId: interaction.member.guild.id,
                    adapterCreator: interaction.member.guild.voiceAdapterCreator
                })

                queueConstructor.connection = connection;
                VideoPlayer(interaction.member.guild, queue.get(interaction.member.guild.id).songs[0]);
                console.log(interaction.member.guild, queueConstructor.songs[0]);
            } catch (err) {
                queue.delete(interaction.member.guild.id);
                interaction.reply("There was an error connecting!");
                throw err;
            }
        } else {
            serverQueue.songs.push(song);
            return interaction.reply(`**${song.title}** added to queue!`);
        }